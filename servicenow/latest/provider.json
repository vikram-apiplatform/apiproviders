{
    "image": "https://www.servicenow.com/content/dam/servicenow-assets/images/meganav/servicenow-header-logo.svg",
    "title": "ServiceNow",
    "id": 3,
    "account": "services",
    "partner": "services",
    "producer": "servicenow",
    "authorization": [
        {
            "authtype": "Basic Authentication",
            "authattributes": [
                {
                    "key": "username",
                    "value": "",
                    "description": "Username",
                    "displayname": "Username"
                },
                {
                    "key": "password",
                    "value": "",
                    "description": "Password",
                    "displayname": "Password"
                }
            ]
        }
    ],
    "description": "ServiceNow gives you the power to make work, work better\u2014no matter the circumstances. So employees can be productive, wherever they are. And customers can get what they need, when they need it.",
    "isPromoted": true,
    "url": "https://developer.servicenow.com/dev.do#!/reference/api/orlando/rest/",
    "additionalConfigurations": {
        "globalVariables": []
    },
    "triggers": [
        {
            "triggerType": "manual",
            "enabled": false
        },
        {
            "triggerType": "webhook",
            "enabled": true,
            "enableActions": false,
            "info": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n  <title>ServiceNow Webhook Configuration</title>\n  <style>\n    .webhook-config-container {\n      margin: 0 auto;\n      padding: 24px;\n      border: 1px solid #e0e0e0;\n      border-radius: 12px;\n      background-color: #f9f9f9;\n      box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n    }\n    .webhook-header { \n      margin-bottom: 30px; \n      text-align: center; \n    }\n    .webhook-header h1 {\n      font-size: 24px;\n      margin: 0 0 12px 0;\n      color: #333;\n      font-weight: 700;\n    }\n    .webhook-header p {\n      margin: 0;\n      color: #666;\n      font-size: 16px;\n      line-height: 1.5;\n    }\n    .webhook-url-container {\n      margin-bottom: 30px;\n      padding: 20px;\n      background-color: #fff;\n      border-radius: 8px;\n      border: 1px solid #e8e8e8;\n    }\n    .url-label {\n      font-size: 14px;\n      font-weight: 600;\n      color: #333;\n      margin-bottom: 8px;\n      display: block;\n    }\n    .url-input-group {\n      display: flex;\n      align-items: center;\n      gap: 12px;\n    }\n    .webhook-url-input {\n      flex: 1;\n      font-size: 13px;\n      background-color: #f5f5f5;\n      color: #333;\n      border: 1px solid #ccc;\n      border-radius: 6px;\n      padding: 12px 16px;\n      transition: border-color 0.2s;\n      font-family: 'Courier New', monospace;\n    }\n    .webhook-url-input:focus {\n      outline: none;\n      border-color: #19427d;\n      box-shadow: 0 0 0 2px rgba(25, 66, 125, 0.1);\n    }\n    .copy-webhook-button {\n      white-space: nowrap;\n      min-width: 100px;\n      padding: 12px 20px;\n      font-size: 13px;\n      cursor: pointer;\n      background-color: #19427d;\n      color: white;\n      border: none;\n      border-radius: 6px;\n      transition: background-color 0.2s;\n      font-weight: 500;\n    }\n    .copy-webhook-button:hover { background-color: #153a6f; }\n    .copy-webhook-button.copied { background-color: #28a745; }\n    \n    .prerequisites {\n      background-color: #fff;\n      border: 1px solid #e0e0e0;\n      border-radius: 8px;\n      padding: 20px;\n      margin-bottom: 30px;\n    }\n    .prerequisites h2 {\n      font-size: 18px;\n      margin: 0 0 15px 0;\n      color: #333;\n      font-weight: 600;\n    }\n    .prerequisites ul {\n      margin: 0;\n      padding-left: 20px;\n    }\n    .prerequisites li {\n      font-size: 14px;\n      margin-bottom: 8px;\n      color: #555;\n      line-height: 1.5;\n    }\n    \n    .steps-section {\n      background-color: #fff;\n      border: 1px solid #e0e0e0;\n      border-radius: 8px;\n      padding: 25px;\n    }\n    .steps-title {\n      font-size: 20px;\n      margin: 0 0 25px 0;\n      color: #333;\n      font-weight: 600;\n    }\n    \n    .step {\n      margin-bottom: 35px;\n      border-bottom: 1px solid #f0f0f0;\n      padding-bottom: 30px;\n    }\n    .step:last-child {\n      border-bottom: none;\n      margin-bottom: 0;\n      padding-bottom: 0;\n    }\n    .step-title {\n      font-size: 16px;\n      font-weight: 600;\n      color: #19427d;\n      margin-bottom: 15px;\n    }\n    .step-content ol {\n      margin: 0;\n      padding-left: 20px;\n    }\n    .step-content li {\n      font-size: 14px;\n      margin-bottom: 8px;\n      color: #444;\n      line-height: 1.6;\n    }\n    .step-content ul {\n      margin: 10px 0;\n      padding-left: 20px;\n    }\n    .step-content ul li {\n      font-size: 14px;\n      margin-bottom: 5px;\n      color: #555;\n    }\n    \n    .form-fields {\n      background-color: #f8f9fa;\n      padding: 15px;\n      border-radius: 6px;\n      margin: 10px 0;\n      border-left: 4px solid #19427d;\n    }\n    .form-fields ul {\n      margin: 0;\n      padding-left: 15px;\n    }\n    .form-fields li {\n      font-size: 13px;\n      margin-bottom: 5px;\n    }\n    \n    .code-block-container {\n      background-color: #f8f9fa !important;\n      color: #2d3748 !important;\n      border: 1px solid #e9ecef !important;\n      padding: 15px;\n      border-radius: 6px;\n\n      font-size: 13px;\n      margin: 15px 0;\n      overflow-x: auto;\n      position: relative;\n    }\n    .code-block pre {\n      margin: 0;\n      white-space: pre-wrap;\n      color: #2d3748 !important;\n    }\n    \n    .info-box {\n      background-color: #cce7ff;\n      border: 1px solid #99d3ff;\n      border-radius: 6px;\n      padding: 15px;\n      margin: 15px 0;\n    }\n    .info-box p {\n      margin: 0;\n      font-size: 14px;\n      color: #0056b3;\n      line-height: 1.5;\n    }\n\n    .warning-box {\n      background-color: #fff3cd;\n      border: 1px solid #ffeaa7;\n      border-radius: 6px;\n      padding: 15px;\n      margin: 15px 0;\n    }\n    .warning-box p {\n      margin: 0;\n      font-size: 14px;\n      color: #856404;\n      line-height: 1.5;\n    }\n    \n    strong { font-weight: 600; }\n    code {\n      background-color: #f1f3f4;\n      padding: 2px 6px;\n      border-radius: 3px;\n      font-size: 12px;\n      color: #333;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"webhook-config-container\">\n    <div class=\"webhook-header\">\n      <h1>ServiceNow Webhook Configuration</h1>\n      <p>\n        Configure your ServiceNow application to send webhook notifications \n        to Haiva.\n      </p>\n    </div>\n\n    <div class=\"webhook-url-container\">\n      <label class=\"url-label\">Your Webhook URL</label>\n      <div class=\"url-input-group\">\n        <input\n          type=\"text\"\n          class=\"webhook-url-input\"\n          value=\"{{webhook_url}}\"\n          readonly\n          onclick=\"this.select()\"\n        />\n        <button class=\"copy-webhook-button\" data-copy-webhook=\"true\">\n  <span class=\"button-text\">Copy URL</span>\n</button>\n      </div>\n    </div>\n\n    <div class=\"prerequisites\">\n      <h2>\ud83d\udee0\ufe0f Prerequisites</h2>\n      <ul>\n        <li>You have access to <strong>ServiceNow Studio</strong></li>\n        <li>You are working inside a <strong>Scoped Application</strong></li>\n        <li>You have the appropriate permissions to create application files</li>\n        <li>Your ServiceNow instance can make outbound HTTP requests</li>\n      </ul>\n    </div>\n\n    <div class=\"steps-section\">\n      <h2 class=\"steps-title\">\ud83d\udd27 Steps in ServiceNow Studio</h2>\n      \n<div class=\"step\">\n  <div class=\"step-title\">Step 1: Open ServiceNow Studio</div>\n  <div class=\"step-content\">\n    <ol>\n      <li>Go to your ServiceNow instance</li>\n      <li>Navigate to left panel</li>\n      <li>Select or create your <strong>Scoped Application</strong></li>\n    </ol>\n  </div>\n</div>\n\n\n      <div class=\"step\">\n        <div class=\"step-title\">Step 2: Create a REST Message (Webhook Target)</div>\n        <div class=\"step-content\">\n          <ol>\n            <li>In the Studio's left sidebar, click the <strong>+ Create Application File</strong> button</li>\n            <li>Select <strong>REST Message</strong> under the \"Integrations (Outbound)\" category</li>\n            <li>Click <strong>Create</strong></li>\n          </ol>\n          <div class=\"form-fields\">\n            Fill out:\n            <ul>\n              <li><strong>Name:</strong> <code>Haiva Event Listener</code></li>\n              <li><strong>Endpoint:</strong> <code>{{webhook_url}}</code></li>\n              <li><strong>Authentication type:</strong> Leave as <code>No authentication</code></li>\n            </ul>\n          </div>\n          <p>Click <strong>Submit</strong></p>\n        </div>\n      </div>\n\n      <div class=\"step\">\n        <div class=\"step-title\">Step 3: Create HTTP Method</div>\n        <div class=\"step-content\">\n          <ol>\n            <li>Open the REST Message you just created</li>\n            <li>Under <strong>HTTP Methods</strong>, click <strong>New</strong></li>\n          </ol>\n          <div class=\"form-fields\">\n            Fill out:\n            <ul>\n              <li><strong>Name:</strong> <code>Send Record Data</code></li>\n              <li><strong>HTTP Method:</strong> <code>POST</code></li>\n              <li><strong>Endpoint:</strong> (same as parent REST Message)</li>\n            </ul>\n          </div>\n          \n          <div class=\"warning-box\">\n            <p><strong>Note:</strong> Leave the <strong>Content</strong> field <em>empty</em> in the HTTP Method. You'll build the JSON payload dynamically in the Business Rule script.</p>\n          </div>\n\n          <p><strong>HTTP Headers tab:</strong> Add these headers:</p>\n          <div class=\"code-block-container\">\n            <pre>Content-Type: application/json</pre>\n          </div>\n          <p>Click <strong>Submit</strong>, then <strong>Update</strong> the REST Message</p>\n        </div>\n      </div>\n\n      <div class=\"step\">\n        <div class=\"step-title\">Step 4: Create a Business Rule</div>\n        <div class=\"step-content\">\n          <ol>\n            <li>In Studio, click <strong>+ Create Application File</strong></li>\n            <li>Select <strong>Business Rule</strong></li>\n            <li>Click <strong>Create</strong></li>\n          </ol>\n          <div class=\"form-fields\">\n            Fill out:\n            <ul>\n              <li><strong>Name:</strong> <code>Webhook Notification Rule</code></li>\n              <li><strong>Table:</strong> <code>Incident [incident]</code></li>\n              <li><strong>When:</strong> <code>after</code></li>\n              <li><strong>Insert:</strong> \u2705 (checked)</li>\n              <li><strong>Update:</strong> \u2705 (checked if you want updates too)</li>\n              <li><strong>Advanced:</strong> \u2705 (checked)</li>\n              <li><strong>Active:</strong> \u2705</li>\n            </ul>\n          </div>\n          <p><strong>Advanced tab - Script field:</strong><br>\n          Paste this script that builds the JSON payload dynamically:</p>\n          <div class=\"code-block-container\">\n            <pre>(function executeRule(current, previous /*null when async*/) {\n    try {\n        // Initialize REST Message and HTTP Method\n        var restMessage = new sn_ws.RESTMessageV2('External Webhook Integration', 'Send Record Data');\n        \n        // Build JSON payload object\n        var payload = {\n            table: current.getTableName(),\n            sys_id: current.getUniqueValue(),\n            number: current.getValue('number') || '',\n            short_description: current.getValue('short_description') || '',\n            state: current.getValue('state') || '',\n            category: current.getValue('category') || '',\n            priority: current.getValue('priority') || '',\n            assigned_to: current.getDisplayValue('assigned_to') || '',\n            caller_id: current.getDisplayValue('caller_id') || '',\n            timestamp: new GlideDateTime().toString()\n        };\n        \n        // Set the request body with JSON payload\n        restMessage.setRequestBody(JSON.stringify(payload));\n        \n        // Set headers\n        restMessage.setRequestHeader('Content-Type', 'application/json');\n        \n        // Execute the webhook call\n        var response = restMessage.execute();\n        var httpStatus = response.getStatusCode();\n        \n        // Log the result\n        if (httpStatus >= 200 && httpStatus < 300) {\n            gs.info(\"Webhook triggered successfully. Status: \" + httpStatus + \n                   \" for record: \" + current.getUniqueValue() + \n                   \" Payload: \" + JSON.stringify(payload));\n        } else {\n            gs.error(\"Webhook failed. Status: \" + httpStatus + \n                    \" Response: \" + response.getBody() + \n                    \" Payload sent: \" + JSON.stringify(payload));\n        }\n        \n    } catch (ex) {\n        gs.error(\"Webhook execution error: \" + ex.getMessage());\n    }\n    \n})(current, previous);</pre>\n          </div>\n          <p>Click <strong>Submit</strong></p>\n        </div>\n      </div>\n\n      <div class=\"step\">\n        <div class=\"step-title\">Step 5: Test Your Configuration</div>\n        <div class=\"step-content\">\n          <ol>\n            <li>Create or update a record in your target table (e.g., Incident)</li>\n            <li>Check <strong>System Logs > Application Logs</strong> for webhook execution messages</li>\n            <li>Look for success/error messages from the Business Rule</li>\n            <li>Verify your webhook endpoint receives the payload</li>\n          </ol>\n          <div class=\"info-box\">\n            <p><strong>Debugging Tips:</strong></p>\n            <ul style=\"margin: 10px 0; padding-left: 20px;\">\n              <li>Check System Logs for detailed error messages</li>\n              <li>You can test the REST Message directly by clicking \"Test\" in the HTTP Method form</li>\n              <li>Use <code>gs.info()</code> statements in your Business Rule to debug payload content</li>\n              <li>Ensure your webhook endpoint is accessible and responding</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <script>\n    function copyWebhookUrl() {\n      const input = document.querySelector('.webhook-url-input');\n      const button = document.querySelector('.copy-webhook-button');\n      const buttonText = button.querySelector('.button-text');\n      \n      navigator.clipboard.writeText(input.value).then(() => {\n        button.classList.add('copied');\n        buttonText.textContent = 'Copied!';\n        \n        setTimeout(() => {\n          button.classList.remove('copied');\n          buttonText.textContent = 'Copy URL';\n        }, 2000);\n      }).catch(err => {\n        console.error('Failed to copy URL:', err);\n        input.select();\n        try {\n          document.execCommand('copy');\n          buttonText.textContent = 'Copied!';\n          setTimeout(() => {\n            buttonText.textContent = 'Copy URL';\n          }, 2000);\n        } catch (e) {\n          alert('Please manually copy the URL');\n        }\n      });\n    }\n\n    document.querySelector('.webhook-url-input').addEventListener('click', function() {\n      this.select();\n    });\n  </script>\n</body>\n</html>",
            "actions": []
        }
    ]
}